# -*- Mode: makefile; Syntax: makefile; indent-tabs-mode-nil; coding: utf-8; show-trailing-whitespace: t -*-
# Copyright 2019 Angelo Rossi <angelo.rossi.homelab@gmail.com>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# file: Makefile.global

# Get and store the OS name.
OS:=$(shell uname)

# Is a toolchain defined?
ifndef TOOLCHAIN
TOOLCHAIN=gnu
endif

# Is an assembler defined?
ifndef COMPILER
COMPILER=gcc
endif

ifeq (${TOOLCHAIN},gnu)
ifeq (${COMPILER},gcc)
ifeq (${OS},OpenBSD)
CC=${shell which egcc}
CPP=${shell which eg++}
FORTRAN=${shell which egfortran}
else
CC=${shell which gcc}
CPP=${shell which g++}
FORTRAN=${shell which gfortran}
endif
AS=${shell which as}
LD=${shell which ld}
OBJCOPY=${shell which objcopy}
OBJDUMP=${shell which objdump}
MAKEDEPEND=${shell which makedepend}
endif

# Project-wide modules directory.
MODULES_PATH=${ROOT}/modules

# Project-wide includes directory.
INCLUDES_PATH=${ROOT}/includes

# Project-wide libraries directory.
LIBRARIES_PATH=${ROOT}/libraries

# Assembler flags.
AS_FLAGS=	-al			\
		-c

# gcc flags.
CC_FLAGS=	-c	  		\
		-std=c99

# g++ flags.
CPP_FLAGS=	-I${INCLUDES_PATH}	\
		-c

# gfortran flags.
FORTRAN_FLAGS=	-O0			\
		-std=gnu		\
		-falign-commons		\
		-fcheck=all		\
		-ffree-form		\
		-fdec			\
		-fdec-static		\
		-fdollar-ok		\
		-ffree-line-length-0	\
		-finit-local-zero	\
		-freorder-blocks	\
		-frepack-arrays		\
		-c

#		-fmax-stack-var-size=100000000	\

F90_FLAGS=	-O0				\
		-cpp				\
		-fPIC				\
		-ffree-form			\
		-ffree-line-length-0		\
		-fcheck=all			\
		-finit-local-zero		\
		-fno-automatic			\
		-J${TOOLCHAIN}			\
		-DWITH_MAIN10			\
		-DWITH_OVER1			\
		-DWITH_OVER2			\
		-DWITH_OVER5			\
		-DWITH_OVER6			\
		-DWITH_OVER7			\
		-DWITH_OVER8			\
		-DWITH_OVER9			\
		-DWITH_OVER10			\
		-DWITH_OVER11			\
		-DWITH_OVER12			\
		-DWITH_OVER13			\
		-DWITH_OVER14			\
		-DWITH_OVER15			\
		-DWITH_OVER16			\
		-DWITH_OVER20			\
		-DWITH_OVER31			\
		-DWITH_OVER39			\
		-DWITH_OVER41			\
		-DWITH_OVER42			\
		-DWITH_OVER44			\
		-DWITH_OVER47			\
		-DWITH_OVER51			\
		-DWITH_OVER52			\
		-DWITH_OVER53			\
		-DWITH_OVER54			\
		-DWITH_OVER55			\
		-DSAVE_TO_DISK			\
		-c

ifneq (${WARNING},)
AS_FLAGS+=-W${WARNING}
C_FLAGS+=-W${WARNING}
CPP_FLAGS+=-W${WARNING}
FORTRAN_FLAGS+=-W${WARNING}
F90_FLAGS+=-W${WARNING}
endif

# objdump most common flags.
OBJDUMP_FLAGS=	-h	\
		-EL	\
		-s	\
		-S	\
		-d

# objcopy most common flags.
OBJCOPY_FLAGS=	-S		\
		-R .data

# Linker flags.
LD_FLAGS=

# Makedepend flags.
MAKEDEPEND_FLAGS=-- ${CC_FLAGS} -- ${SOURCES}

ifneq (${INCLUDES_PATH},)
# Add the include file paths to AS_FLAGS, CC_FLAGS and CPP_FLAGS.
AS_FLAGS+=${patsubst %,-I%,${subst :, ,${INCLUDES_PATH}}}
CC_FLAGS+=${patsubst %,-I%,${subst :, ,${INCLUDES_PATH}}}
CPP_FLAGS+=${patsubst %,-I%,${subst :, ,${INCLUDES_PATH}}}
FORTRAN_FLAGS+=${patsubst %,-I%,${subst :, ,${INCLUDES_PATH}}}
F90_FLAGS+=${patsubst %,-I%,${subst :, ,${INCLUDES_PATH}}}
endif

ifneq (${LIBRARIES_PATH},)
# Add the library path to LD_FLAGS.
LD_FLAGS+=${patsubst %,-L%,${subst :, ,${LIBRARIES_PATH}}}
endif

# Location of libgcc.a, libc.a and libm.a
LIBGCC=${shell ${CC} -print-file-name=libgcc.a}
LIBC=${shell ${CC} -print-file-name=libc.a}
LIBM=${shell ${CC} -print-file-name=libm.a}
LIBGFORTRAN=${shell ${FORTRAN} -print-file-name=libgfortran.a}

LIBRARIES=	c	\
		m
ifneq (${LIBRARIES},)
LD_FLAGS+=${patsubst %,-l%,${subst :, ,${LIBRARIES}}}
endif

ifeq (${DEBUG},1)
AS_FLAGS+=-ggdb3 -gstabs+
CC_FLAGS+=-ggdb3 -gstabs+
CPP_FLAGS+=-ggdb3 -gstabs+
FORTRAN_FLAGS+=-ggdb3 -gstabs+
F90_FLAGS+=-ggdb3 -gstabs+
endif

# Rule for building the object file from each assembly source files.
${TOOLCHAIN}/%.o: %.S
	@if [ 'x${VERBOSE}' = x ];			\
	then						\
		echo " [ AS ] ${<}";			\
	else						\
		echo "${AS} ${AS_FLAGS} ${<} -o ${@}";	\
	fi
	@${AS} ${AS_FLAGS} ${<} -o ${@}

# Rule for building the object file from each c source files.
${TOOLCHAIN}/%.o: %.c
	@if [ 'x${VERBOSE}' = x ];			\
	then						\
		echo " [ CC ] ${<}";			\
	else						\
		echo "${CC} ${CC_FLAGS} ${<} -o ${@}";	\
	fi
	@${CC} ${CC_FLAGS} ${<} -o ${@}

# Rule for building the object file from each c source files.
${TOOLCHAIN}/%.o: %.cpp
	@if [ 'x${VERBOSE}' = x ];				\
	then							\
		echo " [ CPP ] ${<}";				\
	else							\
		echo "${CPP} ${CPP_FLAGS} ${<} -o ${@}";	\
	fi
	@${CPP} ${CPP_FLAGS} ${<} -o ${@}

# Rule for building the object file from each fortran source files.
${TOOLCHAIN}/%.o: %.for
	@if [ 'x${VERBOSE}' = x ];					\
	then								\
		echo " [ F77 ] ${<}";					\
	else								\
		echo "${FORTRAN} ${FORTRAN_FLAGS} ${<} -o ${@}";	\
	fi
	@${FORTRAN} ${FORTRAN_FLAGS} ${<} -o ${@}

# Rule for building the object file from each fortran 90 source files.
${TOOLCHAIN}/%.o: %.f90
	@if [ 'x${VERBOSE}' = x ]; then				\
		echo " [ F90 ] ${<}";				\
	else							\
		echo "${FORTRAN} ${F90_FLAGS} ${<} -o ${@}";	\
	fi
	@${FORTRAN} ${F90_FLAGS} ${<} -o ${@}

# Rule for building the module files.
${TOOLCHAIN}/%.o: ${MODULES_PATH}/%.f90
	@if [ 'x${VERBOSE}' = x ];				\
	then							\
		echo " [ F90 MOD ] ${<}";			\
	else							\
		echo "${FORTRAN} ${F90_FLAGS} ${<} -o ${@}";	\
	fi
	@${FORTRAN} ${F90_FLAGS} ${<} -o ${@}

# Rule for linking the final program file.
${TOOLCHAIN}/%:
	@if [ 'x${VERBOSE}' = x ]; then					\
		echo " [ LD ] ${@}";					\
	else								\
		echo ${FORTRAN}	-Wl,--start-group			\
				${LD_FLAGS} 				\
				-o ${@} $(filter %.o %.a, ${^})		\
				-Wl,--end-group;			\
	fi
	@${FORTRAN} -Wl,--start-group					\
		${LD_FLAGS} 						\
		-o ${@} $(filter %.o %.a, ${^})				\
		-Wl,--end-group

# Rule to create a .lst file.
${TOOLCHAIN}/%.lst:
	@if [ 'x${VERBOSE}' = x ];				\
	then							\
		echo " [ LST ] ${@}";				\
	else							\
		echo "${OBJDUMP} ${OBJDUMP_FLAGS} ${<} > ${@}";	\
	fi
	@${OBJDUMP} ${OBJDUMP_FLAGS} ${<} > ${@}

else
$(error "Unknown toolchain")
endif
